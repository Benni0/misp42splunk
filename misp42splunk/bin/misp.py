import misp42splunk_declare
import input_module_misp as input_module
from io import open
import json
import os
import sys
import modinput_wrapper.base_modinput
from splunklib import modularinput as smi


bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_misp.py
'''


class ModInputmisp(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputmisp, self).__init__(
            "misp42splunk", "misp", use_single_instance
        )
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputmisp, self).get_scheme()
        scheme.title = ("misp")
        scheme.description = (
            "Go to the add-on\'s configuration UI and configure \
            modular inputs under the Inputs menu."
        )
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(
            smi.Argument(
                "name", title="Name",
                description="",
                required_on_create=True
            )
        )

        """
        For customized inputs, hard code the arguments here
        to hide argument detail from users.
        For other input types, arguments should be get from input_module.
        Defining new input types could be easier.
        """
        scheme.add_argument(
            smi.Argument(
                "misp_url", title="MISP url",
                description="provide MISP URL. Do not end with a /",
                required_on_create=True,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "misp_key",
                title="MISP API key",
                description="provide one authkey for the instance",
                required_on_create=True,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "misp_verifycert", title="Check MISP certificate",
                description="",
                required_on_create=False,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "misp_ca_full_path",
                title="MISP CA path",
                description="Provide full path to CA file (pem, crt)",
                required_on_create=False,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "misp_use_proxy",
                title="Use proxy settings",
                description="Use proxy settings for default instance",
                required_on_create=False,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "client_use_cert",
                title="Use a client certificate",
                description="Use a client certificate to \
                authenticate on default instance",
                required_on_create=False,
                required_on_edit=False
            )
        )
        scheme.add_argument(
            smi.Argument(
                "client_cert_full_path",
                title="Client certificate file ",
                description="Provide full path to client certificate file",
                required_on_create=False,
                required_on_edit=False
            )
        )
        return scheme

    def get_app_name(self):
        return "misp42splunk"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("misp_verifycert")
        checkbox_fields.append("client_use_cert")
        checkbox_fields.append("misp_use_proxy")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(
                bin_dir,
                'global_checkbox_param.json'
            )
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error(
                    'Get exception when loading global checkbox \
                    parameter names. ' + str(e)
                )
                self.global_checkbox_fields = []
        return self.global_checkbox_fields


if __name__ == "__main__":
    exitcode = ModInputmisp().run(sys.argv)
    sys.exit(exitcode)
