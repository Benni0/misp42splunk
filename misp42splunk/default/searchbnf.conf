##################
# mispgetioc
##################
[mispgetioc-command]
syntax = |mispgetioc <mispgetioc-options> 
shortdesc = retrieve attributes of matching events in misp instance. Must provide either option "eventid", "last" or "date_from".
description = mispgetioc searches in misp instance (either the one defined in app setup or\
  at misp_url with misp_key checking the certificate or not (misp_verifycert).\
  You can filter on "category" or "type" of attributes, on attributes having the 'to_ids' flag\
  or specific "tags" or "not_tags".\
  You may display the attribute uuid (getuuid: default = false) or creating org (getorg: default=false)
usage = public
example1 = | mispgetioc last=10d
comment1 = retrieve attributes of all events published in last 10 days.
example2 = | mispgetioc last=10d category="Payload delivery,Network%" type=ip-dst onlyids=y
comment2 = retrieve published in last 10 days attributes of type 'ip-dst' and categories 'Payload delivery' or starting by 'Network' and with the flag 'to_ids' set.
related = misp
tags = misp

[mispgetioc-options]
syntax = ( eventid=<string>(,<string>)* |  last=<int>(d|h|m) | date_from=<string> (date_to=<string>) ) \
  to_ids=<bool> warning_list=<bool> category=<string> type=<string> pipesplit=<bool>\
  published=<bool> getuuid=<bool> add_description=<bool> getorg=<bool> geteventtag=<bool> \
  tags=<string>  not_tags=<string> threat_level_id=<int> misp_instance=<string> \
  misp_url=https://host:port misp_key=misp-authorization-key misp_verifycert=<bool>
description = mispgetioc searches in MISP instance \
  Another MISP instance from lookups/misp_instances.csv can be used with field misp_instance \
  or pointing to misp_url URL with misp_key checking the certificate or not (misp_verifycert).\
  You can filter on 'category' or 'type' of attributes, on attributes having the 'to_ids' flag\
  or specific 'tags' or on contrary not having 'not_tags'.\
  To split multivalue attributes into 2 fields set boolean pipesplit to True. \
  For example domain|ip will be split into misp_domain and misp_ip \
  but misp_type and misp_value will still have the original values \
  You may display the attribuite uuid (getuuid: default = n) or org (getorg: default=n)

##################
# mispsearch
##################
[mispsearch-command]
syntax    = mispsearch <mispsearch-options>
shortdesc = search in MISP for attributes having the value of field
description = search in MISP for attributes having the value of field - 
example1 = | mispsearch field=clientip
comment1 = retrieve attributes properties (attribute uuid, event_id, type, category, to_ids flag) for matching values of field clientip 
example2 = | mispsearch field=clientip onlyids=y gettag=y
comment2 = same as example 1 with attribute tag(s) if any
example3 = ... | field ip | mispsearch field=ip misp_instance=ops json_request="{\"returnFormat\": \"json\", \"withAttachments\": \"false\", \"includeEventUuid\": \"true\", \"includeEventTags\": \"true\"}"
comment3 = use a JSON request body for customised search.  

[mispsearch-options]
syntax = field=<string> misp_instance=<string> onlyids=<bool> gettag=<bool> \
  json_request=<string> includeEventUuid=<bool> includeEventTags=<bool>
description = mispsearch takes the value of fieldname and searches in MISP instance for matching attributes.\
  You can filter on 'to_ids' flag \
  You may display the attribuite tag(s) (gettag=y default=n) \
  You can provide a complete JSON request body using json_request

##################
# mispsight
##################
[mispsight-command]
syntax    = mispsight <mispsight-options>
shortdesc = search in MISP for sighting data 
description = search in MISP for sighting data of attributes having the value of field
example1 = | mispsight field=clientip
comment1 = retrieve sighting attributes data for matching values of field clientip 
example2 = | mispsight field=clientip onlyids=y gettag=y
comment2 = same as example 1 with attribute tag(s) if any  

[mispsight-options]
syntax = field=<string> onlyids=<bool> gettag=<bool> misp_instance=<string> \
  misp_url=https://host:port misp_key=misp-authorization-key misp_verifycert=<bool>           
description = mispsight takes the value of fieldname and searches in MISP instance for matching attributes.\
  Another MISP instance from lookups/misp_instances.csv can be used with field misp_instance \
  MISP instance settings can be overwritten using (misp_url, misp_key, misp_verifycert).\
  You can filter on 'to_ids' flag \
  You may display the attribuite tag(s) (gettag=y default=n)


##################
# mispapireport
##################
[mispapireport-command]
syntax = |mispapireport <mispapireport-options>
shortdesc = mispapireport is a wrapper to call misp api endpoint /attributes/restSearch with the same options as direct calls.
description = mispapireport searches in MISP instance \
  Another MISP instance from lookups\misp_instances.csv can be used with field misp_instance \
  or misp_url URL with misp_key checking the certificate or not (misp_verifycert).\
  There are 2 request modes \
  1 - either you set requestmode=p (default) and then you pass additional params \
  You can use almost all available options to build the request\
  i.e "page", "limit", "value", "type", "category", "org", "tags" (and "not_tags"),\
  "date_from", "date_to", "last", "eventid", "uuid", "enforceWarninglist", "to_ids"\
  "deleted", "includeEventUuid", "includeEventTags", "threat_level_id", "eventinfo"\
  2 - or you set requestmode=j and then you pass a complete valid JSON request \
  using json="JSON request". Some entries will be enforced \
  "returnFormat": "json" "withAttachments": "false" \
  and it returns a JSON dataset. Dict items are displayed as columns misp_*

example1 = | mispapireport last=100d
comment1 = retrieve attributes of all events published in last 100 days.
usage = public
related = misp
tags = misp

[mispapireport-options]
syntax = requestmode=<p|j> eventid="<int>(,<int>)*" last=<int>dhm date_from=<string> date_to=<string> \
to_ids=<bool> category=string type=string\
tags=string  not_tags=string threat_level_id=<int> org=<string> value=<string> eventinfo=<string>\
limit=<int> page=<int> uuid=<string> enforceWarninglist=<bool> deleted=<bool> includeEventUuid=<bool> includeEventTags=<bool>\
misp_instance=<string> \
misp_url=https://host:port misp_key=misp-authorization-key misp_verifycert=<bool>
