##################
# mispgetioc
##################
[mispgetioc-command]
syntax = |mispgetioc <mispgetioc-options> 
shortdesc = retrieve attributes of matching events in misp instance. Must provide either option "eventid", "last", "date" or "json_request".
description = mispgetioc searches for matching attributes in misp instance.\
  You can filter on "category" or "type" of attributes, on attributes having the 'to_ids' flag\
  or specific "tags" or "not_tags".\
  You may display the attribute uuid (getuuid: default = false) or creating org (getorg: default=false)
usage = public
example1 = | mispgetioc misp_instance=test last=10d
comment1 = retrieve attributes of all events published in last 10 days.
example2 = | mispgetioc misp_instance=test date="2020-01_01" category="Payload delivery,Network%" type=ip-dst to_ids=y
comment2 = retrieve from events having event date older then 2020-01-01 attributes of type 'ip-dst' and categories 'Payload delivery' or starting by 'Network' and with the flag 'to_ids' set.
related = misp
tags = misp

[mispgetioc-options]
syntax = misp_instance=<string> json_request=<string> eventid=<string> last=<string> date=<string> \
  page=<int> limit=<int> type=<string> category=<string> tags=<string> not_tags=<string> \
  warning_list=<bool> to_ids=<bool> geteventtag=<bool> threat_level=<int> getuuid=<bool> \
  getorg=<bool> pipesplit=<bool> add_description=<bool> output=<string>
description = mispgetioc searches in MISP instance \
  Define your MISP instances as inputs. !!! limit is set by default to 1000. !!!\
  You can filter on 'category' or 'type' of attributes, on attributes having the 'to_ids' flag\
  or specific 'tags' or on contrary not having tags ('not_tags').\
  To split composite attributes into 2 fields set boolean pipesplit to True. \
  For example domain|ip will be split into misp_domain and misp_ip \
  but misp_type and misp_value will still have the original values \
  You may display the attribuite uuid (getuuid: default = n) or org (getorg: default=n). \
  You can get "raw" attributes with output=raw (if not specified it is output=default)

##################
# mispsearch
##################
[mispsearch-command]
syntax    = mispsearch <mispsearch-options>
shortdesc = search in MISP for attributes having the value of field
description = search in MISP for attributes having the value of field - 
example1 = | mispsearch misp_instance=test field=clientip
comment1 = retrieve attributes properties (attribute uuid, event_id, type, category, to_ids flag) for matching values of field clientip 
example2 = | mispsearch field=clientip to_ids=y gettag=y
comment2 = same as example 1 with attribute tag(s) if any
example3 = ... | field ip | mispsearch misp_instance=test field=ip misp_instance=ops json_request="{\"returnFormat\": \"json\", \"withAttachments\": \"false\", \"includeEventUuid\": \"true\", \"includeEventTags\": \"true\"}"
comment3 = use a JSON request body for customised search.  

[mispsearch-options]
syntax = misp_instance=<string> field=<string> to_ids=<bool> last=<string> \
  limit=<int> page=<int> getorg=<bool> \
  gettag=<bool> includeEventUuid=<bool> includeEventTags=<bool> \
  json_request=<string> 
description = mispsearch takes the value of fieldname and searches in MISP instance for matching attributes.\
  You can filter on 'to_ids' flag \
  You may display the attribuite tag(s) (gettag=y default=n) \
  You can provide a complete JSON request body using json_request \
  (format will be force to JSON and withAttachment to False)

##################
# mispsight
##################
[mispsight-command]
syntax    = mispsight <mispsight-options>
shortdesc = search in MISP for sighting data 
description = search in MISP for sighting data of attributes having the value of field
example1 = | mispsight misp_instance=test field=clientip
comment1 = retrieve sighting attributes data for matching values of field clientip 
example2 = | mispsight misp_instance=test field=clientip to_ids=y gettag=y
comment2 = same as example 1 with attribute tag(s) if any  

[mispsight-options]
syntax = field=<string> to_ids=<bool> gettag=<bool> misp_instance=<string> \
  misp_url=https://host:port misp_key=misp-authorization-key misp_verifycert=<bool>           
description = mispsight takes the value of fieldname and searches in MISP instance for matching attributes.\
  Another MISP instance from lookups/misp_instances.csv can be used with field misp_instance \
  MISP instance settings can be overwritten using (misp_url, misp_key, misp_verifycert).\
  You can filter on 'to_ids' flag \
  You may display the attribuite tag(s) (gettag=y default=n)

##################
# mispgetevent
##################
[mispgetevent-command]
syntax = |mispgetevent <mispgetevent-options> 
shortdesc = retrieve events in misp instance. Must provide either option "eventid", "last", "date_from" or "json_request".
description = mispgetevent searches in misp instance matching events\
  You can filter on "category" or "type" of attributes, on attributes having the 'to_ids' flag\
  or specific "tags" or "not_tags".\
  You may display the attribute uuid (getuuid: default = false) or creating org (getorg: default=false)
usage = public
example1 = | mispgetevent misp_instance=test last=10d
comment1 = retrieve events published in last 10 days.
example2 = | mispgetevent misp_instance=test last=10d category="Payload delivery,Network%" type=ip-dst to_ids=y
comment2 = retrieve events published in last 10 days with attributes of type 'ip-dst' and categories 'Payload delivery' or starting by 'Network' and with the flag 'to_ids' set.
related = misp
tags = misp

[mispgetevent-options]
syntax = misp_instance=<string> json_request=<string> eventid=<string> last=<string> date=<string> \
  page=<int> limit=<int> type=<string> category=<string> tags=<string> not_tags=<string> \
  getioc=<bool> pipesplit=<bool> published=<bool> output=<string> warning_list=<bool> 
description = mispgetevent searches in MISP instance \
  Define your MISP instances as inputs. limit is set by default to 1000.\
  You can filter on 'category' or 'type' of attributes, or specific 'tags' or on contrary not having 'not_tags'.\
  To return also attribute values, use getioc=True \
  To split multivalue attributes into 2 fields set boolean pipesplit to True. \
  For example domain|ip will be split into misp_domain and misp_ip \
  but misp_type and misp_value will still have the original values \
  

##################
# mispcollect
##################
[mispcollect-command]
syntax = |mispcollect <mispcollect-options> 
shortdesc = retrieve attributes or events in misp instance. Must provide either option "eventid", "last", "date_from" or "json_request".
description = mispcollect pulls attributes or events from misp instance and display as events.\
  You can filter on "category" or "type" of attributes, on attributes having the 'to_ids' flag\
  or specific "tags" or "not_tags".\
  You may display the attribute uuid (getuuid: default = false) or creating org (getorg: default=false)
usage = public
example1 = | mispcollect misp_instance=test last=10d
comment1 = retrieve attributes of all events published in last 10 days and display as events
example2 = | mispcollect last=10d endpoint=events
comment2 = retrieve events published in last 10 days and display as events.
related = misp
tags = misp

[mispcollect-options]
syntax = misp_instance=<string> json_request=<string> eventid=<string> last=<string> date=<string> \
  page=<int> limit=<int> type=<string> category=<string> endpoint=<string>> tags=<string> not_tags=<string> \
  warning_list=<bool> to_ids=<bool> threat_level=<int>
description = mispcollect searches in MISP instance \
  Define your MISP instances as inputs. !!! limit is set by default to 1000. !!!\
  You can filter on 'category' or 'type' of attributes, on attributes having the 'to_ids' flag\
  or specific 'tags' or on contrary not having tags ('not_tags').
